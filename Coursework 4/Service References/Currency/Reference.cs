//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace usingwebservices.Currency {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Currency.CurrencyServiceSoap")]
    public interface CurrencyServiceSoap {
        
        // CODEGEN: Generating message contract since element name country from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExchangeRate", ReplyAction="*")]
        usingwebservices.Currency.ExchangeRateResponse ExchangeRate(usingwebservices.Currency.ExchangeRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExchangeRate", ReplyAction="*")]
        System.Threading.Tasks.Task<usingwebservices.Currency.ExchangeRateResponse> ExchangeRateAsync(usingwebservices.Currency.ExchangeRateRequest request);
        
        // CODEGEN: Generating message contract since element name country from namespace http://tempuri.org/ is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateExchangeRate", ReplyAction="*")]
        usingwebservices.Currency.CalculateExchangeRateResponse CalculateExchangeRate(usingwebservices.Currency.CalculateExchangeRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CalculateExchangeRate", ReplyAction="*")]
        System.Threading.Tasks.Task<usingwebservices.Currency.CalculateExchangeRateResponse> CalculateExchangeRateAsync(usingwebservices.Currency.CalculateExchangeRateRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExchangeRateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ExchangeRate", Namespace="http://tempuri.org/", Order=0)]
        public usingwebservices.Currency.ExchangeRateRequestBody Body;
        
        public ExchangeRateRequest() {
        }
        
        public ExchangeRateRequest(usingwebservices.Currency.ExchangeRateRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class ExchangeRateRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string country;
        
        public ExchangeRateRequestBody() {
        }
        
        public ExchangeRateRequestBody(string country) {
            this.country = country;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ExchangeRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ExchangeRateResponse", Namespace="http://tempuri.org/", Order=0)]
        public usingwebservices.Currency.ExchangeRateResponseBody Body;
        
        public ExchangeRateResponse() {
        }
        
        public ExchangeRateResponse(usingwebservices.Currency.ExchangeRateResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class ExchangeRateResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double ExchangeRateResult;
        
        public ExchangeRateResponseBody() {
        }
        
        public ExchangeRateResponseBody(double ExchangeRateResult) {
            this.ExchangeRateResult = ExchangeRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CalculateExchangeRateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CalculateExchangeRate", Namespace="http://tempuri.org/", Order=0)]
        public usingwebservices.Currency.CalculateExchangeRateRequestBody Body;
        
        public CalculateExchangeRateRequest() {
        }
        
        public CalculateExchangeRateRequest(usingwebservices.Currency.CalculateExchangeRateRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class CalculateExchangeRateRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double value;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string country;
        
        public CalculateExchangeRateRequestBody() {
        }
        
        public CalculateExchangeRateRequestBody(double value, string country) {
            this.value = value;
            this.country = country;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class CalculateExchangeRateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="CalculateExchangeRateResponse", Namespace="http://tempuri.org/", Order=0)]
        public usingwebservices.Currency.CalculateExchangeRateResponseBody Body;
        
        public CalculateExchangeRateResponse() {
        }
        
        public CalculateExchangeRateResponse(usingwebservices.Currency.CalculateExchangeRateResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class CalculateExchangeRateResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public double CalculateExchangeRateResult;
        
        public CalculateExchangeRateResponseBody() {
        }
        
        public CalculateExchangeRateResponseBody(double CalculateExchangeRateResult) {
            this.CalculateExchangeRateResult = CalculateExchangeRateResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CurrencyServiceSoapChannel : usingwebservices.Currency.CurrencyServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyServiceSoapClient : System.ServiceModel.ClientBase<usingwebservices.Currency.CurrencyServiceSoap>, usingwebservices.Currency.CurrencyServiceSoap {
        
        public CurrencyServiceSoapClient() {
        }
        
        public CurrencyServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        usingwebservices.Currency.ExchangeRateResponse usingwebservices.Currency.CurrencyServiceSoap.ExchangeRate(usingwebservices.Currency.ExchangeRateRequest request) {
            return base.Channel.ExchangeRate(request);
        }
        
        public double ExchangeRate(string country) {
            usingwebservices.Currency.ExchangeRateRequest inValue = new usingwebservices.Currency.ExchangeRateRequest();
            inValue.Body = new usingwebservices.Currency.ExchangeRateRequestBody();
            inValue.Body.country = country;
            usingwebservices.Currency.ExchangeRateResponse retVal = ((usingwebservices.Currency.CurrencyServiceSoap)(this)).ExchangeRate(inValue);
            return retVal.Body.ExchangeRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<usingwebservices.Currency.ExchangeRateResponse> usingwebservices.Currency.CurrencyServiceSoap.ExchangeRateAsync(usingwebservices.Currency.ExchangeRateRequest request) {
            return base.Channel.ExchangeRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<usingwebservices.Currency.ExchangeRateResponse> ExchangeRateAsync(string country) {
            usingwebservices.Currency.ExchangeRateRequest inValue = new usingwebservices.Currency.ExchangeRateRequest();
            inValue.Body = new usingwebservices.Currency.ExchangeRateRequestBody();
            inValue.Body.country = country;
            return ((usingwebservices.Currency.CurrencyServiceSoap)(this)).ExchangeRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        usingwebservices.Currency.CalculateExchangeRateResponse usingwebservices.Currency.CurrencyServiceSoap.CalculateExchangeRate(usingwebservices.Currency.CalculateExchangeRateRequest request) {
            return base.Channel.CalculateExchangeRate(request);
        }
        
        public double CalculateExchangeRate(double value, string country) {
            usingwebservices.Currency.CalculateExchangeRateRequest inValue = new usingwebservices.Currency.CalculateExchangeRateRequest();
            inValue.Body = new usingwebservices.Currency.CalculateExchangeRateRequestBody();
            inValue.Body.value = value;
            inValue.Body.country = country;
            usingwebservices.Currency.CalculateExchangeRateResponse retVal = ((usingwebservices.Currency.CurrencyServiceSoap)(this)).CalculateExchangeRate(inValue);
            return retVal.Body.CalculateExchangeRateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<usingwebservices.Currency.CalculateExchangeRateResponse> usingwebservices.Currency.CurrencyServiceSoap.CalculateExchangeRateAsync(usingwebservices.Currency.CalculateExchangeRateRequest request) {
            return base.Channel.CalculateExchangeRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<usingwebservices.Currency.CalculateExchangeRateResponse> CalculateExchangeRateAsync(double value, string country) {
            usingwebservices.Currency.CalculateExchangeRateRequest inValue = new usingwebservices.Currency.CalculateExchangeRateRequest();
            inValue.Body = new usingwebservices.Currency.CalculateExchangeRateRequestBody();
            inValue.Body.value = value;
            inValue.Body.country = country;
            return ((usingwebservices.Currency.CurrencyServiceSoap)(this)).CalculateExchangeRateAsync(inValue);
        }
    }
}
