//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace usingwebservices.CurrencySystemService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://webservices.cloanto.com/currencyserver/", ConfigurationName="CurrencySystemService.CurrencyServerSoap")]
    public interface CurrencyServerSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminLoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AdminLoad(string licenseKey, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminLoad", ReplyAction="*")]
        System.Threading.Tasks.Task AdminLoadAsync(string licenseKey, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AdminMessage(string licenseKey, string text, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminMessage", ReplyAction="*")]
        System.Threading.Tasks.Task AdminMessageAsync(string licenseKey, string text, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AdminSave(string licenseKey, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminSave", ReplyAction="*")]
        System.Threading.Tasks.Task AdminSaveAsync(string licenseKey, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminUpdateNow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AdminUpdateNow(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/AdminUpdateNow", ReplyAction="*")]
        System.Threading.Tasks.Task AdminUpdateNowAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/ConvertToNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double ConvertToNum(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/ConvertToNum", ReplyAction="*")]
        System.Threading.Tasks.Task<double> ConvertToNumAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/ConvertToStr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ConvertToStr(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string format, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/ConvertToStr", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ConvertToStrAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string format, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CountryToCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CountryToCurrency(string licenseKey, string country, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CountryToCurrency", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CountryToCurrencyAsync(string licenseKey, string country, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/Currencies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Currencies(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/Currencies", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrenciesAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyCustom", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencyCustom(string licenseKey, string currency, string locale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyCustom", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencyCustomAsync(string licenseKey, string currency, string locale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CurrencyExists(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyExists", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CurrencyExistsAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyHits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long CurrencyHits(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyHits", ReplyAction="*")]
        System.Threading.Tasks.Task<long> CurrencyHitsAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLastChangeTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencyLastChangeTimeLocal(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLastChangeTimeLocal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencyLastChangeTimeLocalAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLastChangeTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencyLastChangeTimeUT(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLastChangeTimeUT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencyLastChangeTimeUTAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLegalTender", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CurrencyLegalTender(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyLegalTender", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CurrencyLegalTenderAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencyName(string licenseKey, string currency, string locale, bool titleStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencyNameAsync(string licenseKey, string currency, string locale, bool titleStyle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyPhysical", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CurrencyPhysical(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyPhysical", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CurrencyPhysicalAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyRegime", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencyRegime(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyRegime", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencyRegimeAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySecondsSinceLastChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long CurrencySecondsSinceLastChange(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySecondsSinceLastChange", ReplyAction="*")]
        System.Threading.Tasks.Task<long> CurrencySecondsSinceLastChangeAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyServers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long CurrencyServers(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyServers", ReplyAction="*")]
        System.Threading.Tasks.Task<long> CurrencyServersAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySmallestUnit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencySmallestUnit(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySmallestUnit", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencySmallestUnitAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySubUnit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CurrencySubUnit(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySubUnit", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CurrencySubUnitAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySymbol", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrencySymbol(string licenseKey, string currency, string locale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencySymbol", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrencySymbolAsync(string licenseKey, string currency, string locale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyWarning", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CurrencyWarning(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrencyWarning", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CurrencyWarningAsync(string licenseKey, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrentTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrentTimeLocal(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrentTimeLocal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrentTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrentTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CurrentTimeUT(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/CurrentTimeUT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CurrentTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/DomainToCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DomainToCurrency(string licenseKey, string domain, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/DomainToCurrency", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DomainToCurrencyAsync(string licenseKey, string domain, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCopyright", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationCopyright(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCopyright", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationCopyrightAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCreationTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationCreationTimeLocal(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCreationTimeLocal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationCreationTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCreationTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationCreationTimeUT(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationCreationTimeUT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationCreationTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationExpirationTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationExpirationTimeLocal(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationExpirationTimeLocal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationExpirationTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationExpirationTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationExpirationTimeUT(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationExpirationTimeUT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationExpirationTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationMessage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationMessage(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationMessage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationMessageAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationSource", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InformationSource(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/InformationSource", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InformationSourceAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LastChangeTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LastChangeTimeLocal(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LastChangeTimeLocal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LastChangeTimeLocalAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LastChangeTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LastChangeTimeUT(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LastChangeTimeUT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LastChangeTimeUTAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LocaleToCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LocaleToCurrency(string licenseKey, string locale, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/LocaleToCurrency", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LocaleToCurrencyAsync(string licenseKey, string locale, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        double RateNum(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateNum", ReplyAction="*")]
        System.Threading.Tasks.Task<double> RateNumAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateStr", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RateStr(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string format, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateStr", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RateStrAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string format, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateTimeLocal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RateTimeLocal(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateTimeLocal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RateTimeLocalAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateTimeUT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RateTimeUT(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/RateTimeUT", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RateTimeUTAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/SecondsSinceLastChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        long SecondsSinceLastChange(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/SecondsSinceLastChange", ReplyAction="*")]
        System.Threading.Tasks.Task<long> SecondsSinceLastChangeAsync(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/Version", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Version(string licenseKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.cloanto.com/currencyserver/Version", ReplyAction="*")]
        System.Threading.Tasks.Task<string> VersionAsync(string licenseKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CurrencyServerSoapChannel : usingwebservices.CurrencySystemService.CurrencyServerSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyServerSoapClient : System.ServiceModel.ClientBase<usingwebservices.CurrencySystemService.CurrencyServerSoap>, usingwebservices.CurrencySystemService.CurrencyServerSoap {
        
        public CurrencyServerSoapClient() {
        }
        
        public CurrencyServerSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyServerSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServerSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AdminLoad(string licenseKey, string file) {
            base.Channel.AdminLoad(licenseKey, file);
        }
        
        public System.Threading.Tasks.Task AdminLoadAsync(string licenseKey, string file) {
            return base.Channel.AdminLoadAsync(licenseKey, file);
        }
        
        public void AdminMessage(string licenseKey, string text, int type) {
            base.Channel.AdminMessage(licenseKey, text, type);
        }
        
        public System.Threading.Tasks.Task AdminMessageAsync(string licenseKey, string text, int type) {
            return base.Channel.AdminMessageAsync(licenseKey, text, type);
        }
        
        public void AdminSave(string licenseKey, string file) {
            base.Channel.AdminSave(licenseKey, file);
        }
        
        public System.Threading.Tasks.Task AdminSaveAsync(string licenseKey, string file) {
            return base.Channel.AdminSaveAsync(licenseKey, file);
        }
        
        public void AdminUpdateNow(string licenseKey) {
            base.Channel.AdminUpdateNow(licenseKey);
        }
        
        public System.Threading.Tasks.Task AdminUpdateNowAsync(string licenseKey) {
            return base.Channel.AdminUpdateNowAsync(licenseKey);
        }
        
        public double ConvertToNum(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string date, string type) {
            return base.Channel.ConvertToNum(licenseKey, fromCurrency, toCurrency, amount, rounding, date, type);
        }
        
        public System.Threading.Tasks.Task<double> ConvertToNumAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string date, string type) {
            return base.Channel.ConvertToNumAsync(licenseKey, fromCurrency, toCurrency, amount, rounding, date, type);
        }
        
        public string ConvertToStr(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string format, string date, string type) {
            return base.Channel.ConvertToStr(licenseKey, fromCurrency, toCurrency, amount, rounding, format, date, type);
        }
        
        public System.Threading.Tasks.Task<string> ConvertToStrAsync(string licenseKey, string fromCurrency, string toCurrency, double amount, bool rounding, string format, string date, string type) {
            return base.Channel.ConvertToStrAsync(licenseKey, fromCurrency, toCurrency, amount, rounding, format, date, type);
        }
        
        public string CountryToCurrency(string licenseKey, string country, bool activeOnly) {
            return base.Channel.CountryToCurrency(licenseKey, country, activeOnly);
        }
        
        public System.Threading.Tasks.Task<string> CountryToCurrencyAsync(string licenseKey, string country, bool activeOnly) {
            return base.Channel.CountryToCurrencyAsync(licenseKey, country, activeOnly);
        }
        
        public string Currencies(string licenseKey) {
            return base.Channel.Currencies(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> CurrenciesAsync(string licenseKey) {
            return base.Channel.CurrenciesAsync(licenseKey);
        }
        
        public string CurrencyCustom(string licenseKey, string currency, string locale) {
            return base.Channel.CurrencyCustom(licenseKey, currency, locale);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyCustomAsync(string licenseKey, string currency, string locale) {
            return base.Channel.CurrencyCustomAsync(licenseKey, currency, locale);
        }
        
        public bool CurrencyExists(string licenseKey, string currency) {
            return base.Channel.CurrencyExists(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyExistsAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyExistsAsync(licenseKey, currency);
        }
        
        public long CurrencyHits(string licenseKey, string currency) {
            return base.Channel.CurrencyHits(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<long> CurrencyHitsAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyHitsAsync(licenseKey, currency);
        }
        
        public string CurrencyLastChangeTimeLocal(string licenseKey, string currency) {
            return base.Channel.CurrencyLastChangeTimeLocal(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyLastChangeTimeLocalAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyLastChangeTimeLocalAsync(licenseKey, currency);
        }
        
        public string CurrencyLastChangeTimeUT(string licenseKey, string currency) {
            return base.Channel.CurrencyLastChangeTimeUT(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyLastChangeTimeUTAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyLastChangeTimeUTAsync(licenseKey, currency);
        }
        
        public bool CurrencyLegalTender(string licenseKey, string currency) {
            return base.Channel.CurrencyLegalTender(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyLegalTenderAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyLegalTenderAsync(licenseKey, currency);
        }
        
        public string CurrencyName(string licenseKey, string currency, string locale, bool titleStyle) {
            return base.Channel.CurrencyName(licenseKey, currency, locale, titleStyle);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyNameAsync(string licenseKey, string currency, string locale, bool titleStyle) {
            return base.Channel.CurrencyNameAsync(licenseKey, currency, locale, titleStyle);
        }
        
        public bool CurrencyPhysical(string licenseKey, string currency) {
            return base.Channel.CurrencyPhysical(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyPhysicalAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyPhysicalAsync(licenseKey, currency);
        }
        
        public string CurrencyRegime(string licenseKey, string currency) {
            return base.Channel.CurrencyRegime(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencyRegimeAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyRegimeAsync(licenseKey, currency);
        }
        
        public long CurrencySecondsSinceLastChange(string licenseKey, string currency) {
            return base.Channel.CurrencySecondsSinceLastChange(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<long> CurrencySecondsSinceLastChangeAsync(string licenseKey, string currency) {
            return base.Channel.CurrencySecondsSinceLastChangeAsync(licenseKey, currency);
        }
        
        public long CurrencyServers(string licenseKey, string currency) {
            return base.Channel.CurrencyServers(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<long> CurrencyServersAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyServersAsync(licenseKey, currency);
        }
        
        public string CurrencySmallestUnit(string licenseKey, string currency) {
            return base.Channel.CurrencySmallestUnit(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<string> CurrencySmallestUnitAsync(string licenseKey, string currency) {
            return base.Channel.CurrencySmallestUnitAsync(licenseKey, currency);
        }
        
        public bool CurrencySubUnit(string licenseKey, string currency) {
            return base.Channel.CurrencySubUnit(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencySubUnitAsync(string licenseKey, string currency) {
            return base.Channel.CurrencySubUnitAsync(licenseKey, currency);
        }
        
        public string CurrencySymbol(string licenseKey, string currency, string locale) {
            return base.Channel.CurrencySymbol(licenseKey, currency, locale);
        }
        
        public System.Threading.Tasks.Task<string> CurrencySymbolAsync(string licenseKey, string currency, string locale) {
            return base.Channel.CurrencySymbolAsync(licenseKey, currency, locale);
        }
        
        public bool CurrencyWarning(string licenseKey, string currency) {
            return base.Channel.CurrencyWarning(licenseKey, currency);
        }
        
        public System.Threading.Tasks.Task<bool> CurrencyWarningAsync(string licenseKey, string currency) {
            return base.Channel.CurrencyWarningAsync(licenseKey, currency);
        }
        
        public string CurrentTimeLocal(string licenseKey) {
            return base.Channel.CurrentTimeLocal(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> CurrentTimeLocalAsync(string licenseKey) {
            return base.Channel.CurrentTimeLocalAsync(licenseKey);
        }
        
        public string CurrentTimeUT(string licenseKey) {
            return base.Channel.CurrentTimeUT(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> CurrentTimeUTAsync(string licenseKey) {
            return base.Channel.CurrentTimeUTAsync(licenseKey);
        }
        
        public string DomainToCurrency(string licenseKey, string domain, bool activeOnly) {
            return base.Channel.DomainToCurrency(licenseKey, domain, activeOnly);
        }
        
        public System.Threading.Tasks.Task<string> DomainToCurrencyAsync(string licenseKey, string domain, bool activeOnly) {
            return base.Channel.DomainToCurrencyAsync(licenseKey, domain, activeOnly);
        }
        
        public string InformationCopyright(string licenseKey) {
            return base.Channel.InformationCopyright(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationCopyrightAsync(string licenseKey) {
            return base.Channel.InformationCopyrightAsync(licenseKey);
        }
        
        public string InformationCreationTimeLocal(string licenseKey) {
            return base.Channel.InformationCreationTimeLocal(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationCreationTimeLocalAsync(string licenseKey) {
            return base.Channel.InformationCreationTimeLocalAsync(licenseKey);
        }
        
        public string InformationCreationTimeUT(string licenseKey) {
            return base.Channel.InformationCreationTimeUT(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationCreationTimeUTAsync(string licenseKey) {
            return base.Channel.InformationCreationTimeUTAsync(licenseKey);
        }
        
        public string InformationExpirationTimeLocal(string licenseKey) {
            return base.Channel.InformationExpirationTimeLocal(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationExpirationTimeLocalAsync(string licenseKey) {
            return base.Channel.InformationExpirationTimeLocalAsync(licenseKey);
        }
        
        public string InformationExpirationTimeUT(string licenseKey) {
            return base.Channel.InformationExpirationTimeUT(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationExpirationTimeUTAsync(string licenseKey) {
            return base.Channel.InformationExpirationTimeUTAsync(licenseKey);
        }
        
        public string InformationMessage(string licenseKey) {
            return base.Channel.InformationMessage(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationMessageAsync(string licenseKey) {
            return base.Channel.InformationMessageAsync(licenseKey);
        }
        
        public string InformationSource(string licenseKey) {
            return base.Channel.InformationSource(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> InformationSourceAsync(string licenseKey) {
            return base.Channel.InformationSourceAsync(licenseKey);
        }
        
        public string LastChangeTimeLocal(string licenseKey) {
            return base.Channel.LastChangeTimeLocal(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> LastChangeTimeLocalAsync(string licenseKey) {
            return base.Channel.LastChangeTimeLocalAsync(licenseKey);
        }
        
        public string LastChangeTimeUT(string licenseKey) {
            return base.Channel.LastChangeTimeUT(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> LastChangeTimeUTAsync(string licenseKey) {
            return base.Channel.LastChangeTimeUTAsync(licenseKey);
        }
        
        public string LocaleToCurrency(string licenseKey, string locale, bool activeOnly) {
            return base.Channel.LocaleToCurrency(licenseKey, locale, activeOnly);
        }
        
        public System.Threading.Tasks.Task<string> LocaleToCurrencyAsync(string licenseKey, string locale, bool activeOnly) {
            return base.Channel.LocaleToCurrencyAsync(licenseKey, locale, activeOnly);
        }
        
        public double RateNum(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string date, string type) {
            return base.Channel.RateNum(licenseKey, baseCurrency, toCurrency, rounding, date, type);
        }
        
        public System.Threading.Tasks.Task<double> RateNumAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string date, string type) {
            return base.Channel.RateNumAsync(licenseKey, baseCurrency, toCurrency, rounding, date, type);
        }
        
        public string RateStr(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string format, string date, string type) {
            return base.Channel.RateStr(licenseKey, baseCurrency, toCurrency, rounding, format, date, type);
        }
        
        public System.Threading.Tasks.Task<string> RateStrAsync(string licenseKey, string baseCurrency, string toCurrency, bool rounding, string format, string date, string type) {
            return base.Channel.RateStrAsync(licenseKey, baseCurrency, toCurrency, rounding, format, date, type);
        }
        
        public string RateTimeLocal(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type) {
            return base.Channel.RateTimeLocal(licenseKey, baseCurrency, toCurrency, priority, date, type);
        }
        
        public System.Threading.Tasks.Task<string> RateTimeLocalAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type) {
            return base.Channel.RateTimeLocalAsync(licenseKey, baseCurrency, toCurrency, priority, date, type);
        }
        
        public string RateTimeUT(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type) {
            return base.Channel.RateTimeUT(licenseKey, baseCurrency, toCurrency, priority, date, type);
        }
        
        public System.Threading.Tasks.Task<string> RateTimeUTAsync(string licenseKey, string baseCurrency, string toCurrency, string priority, string date, string type) {
            return base.Channel.RateTimeUTAsync(licenseKey, baseCurrency, toCurrency, priority, date, type);
        }
        
        public long SecondsSinceLastChange(string licenseKey) {
            return base.Channel.SecondsSinceLastChange(licenseKey);
        }
        
        public System.Threading.Tasks.Task<long> SecondsSinceLastChangeAsync(string licenseKey) {
            return base.Channel.SecondsSinceLastChangeAsync(licenseKey);
        }
        
        public string Version(string licenseKey) {
            return base.Channel.Version(licenseKey);
        }
        
        public System.Threading.Tasks.Task<string> VersionAsync(string licenseKey) {
            return base.Channel.VersionAsync(licenseKey);
        }
    }
}
